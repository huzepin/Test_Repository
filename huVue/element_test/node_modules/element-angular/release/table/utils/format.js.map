{"version":3,"sources":["../../../src/table/utils/format.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAA,eAAA,CAAA;AAEpB;IAAA;IAwCA,CAAC;IAvCD;;;OAGG;IAAA,yBAAA,GACH,UADG,GAAA;QAEC,EAAE,CAAC,CAAC,GADC,KAAO,MAAA,CAAO;YAAC,MAAA,CAAO,IAAA,CAAA;QAE3B,EAAE,CAAC,CAAC,CADC,MAAC,CAAM,KAAC,CAAK,CAAC,GAAC,CAAG,CAAC;YAAC,MAAA,CAAO,CAAA,GAAE,CAAA;QAElC,EAAE,CAAC,CAAC,MADC,CAAM,GAAC,CAAG,CAAC,QAAC,CAAQ,IAAC,CAAI,CAAC,CAAC,CAAA;YAE9B,MAAM,CADC,CAAA,MAAE,CAAM,GAAC,CAAG,CAAC,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC,CAAA;QAEpC,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,qCAJG,GAIH,UAJG,SAAA;QAKC,IAAM,gBAAgB,CAJhB,WAAA,GAAwB,CAAA,OAAE,EAAQ,OAAA,EAAS,OAAA,CAAQ,CAAA;QAKzD,IAAM,gBAAgB,CAJhB,YAAA,GAAoB,SAAA,CAAU,GAAC,CAAG,UAAC,GAAC,EAAI,KAAA;YAK5C,IAAM,gBAAgB,CAJhB,UAAA,GAAkB,EAAA,CAAA;YAKxB,GAAG,CAJC,OAAC,CAAO,UAAC,IAAM;gBAKjB,OAAA,MAAM,CAJC,IAAC,CAAI,IAAC,CAAI,CAAC,OAAC,CAAO,UAAC,CAAG;oBAK5B,EAAE,CAAC,CAAC,WAJC,CAAW,OAAC,CAAO,CAAC,CAAC,GAAG,CAAA,CAAE,CAAC,CAAA;wBAK9B,UAAU,CAJC,CAAC,CAAC,GAAG,IAAA,CAAK,CAAC,CAAC,CAAA;oBAKzB,CAAC;gBACL,CAAC,CAJC;YAAA,CAAA,CAAC,CAAA;YAKH,UAAU,CAJC,OAAC,CAAO,GAAG,KAAA,CAAA;YAKtB,MAAM,CAJC,UAAA,CAAA;QAKT,CAAC,CAJC,CAAA;QAKF,MAAM,CAJC,YAAA,CAAA;IAKT,CAAC;IAFI,wBAAA,GAAoC;QAK3C,EAJE,IAAA,EAAM,UAAA,EAAW;KAKlB,CAJC;IAKF;;OAEG;IALF,4BAAA,GAAA,cAAA,OAAA,EAOA,EAPA,CAOA,CAAC;IACF,oBAAC;CAxCD,AAwCC,IAAA;SAtCA,aAAA;AAwCD;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;AAC7B,CAAC","file":"format.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TableColumnDataItem } from '../table.interface';\nexport class ElTableFormat {\n/**\n * @param {?} val\n * @return {?}\n */\nstatic getCSSValue(val: string | number): number {\n    if (val === 'auto') return null\n    if (!Number.isNaN(+val)) return +val\n    if (String(val).endsWith('px')) {\n      return +String(val).split('px')[0]\n    }\n  }\n/**\n * @param {?} tableRows\n * @return {?}\n */\nformatRowData(tableRows: TableColumnDataItem[][]): any {\n    const /** @type {?} */ elTableKeys: string[] = ['value', 'width', 'index']\n    const /** @type {?} */ tableRowsMap: any = tableRows.map((row, index) => {\n      const /** @type {?} */ currentRow: any = {}\n      row.forEach((item: TableColumnDataItem) =>\n        Object.keys(item).forEach((r: any) => {\n          if (elTableKeys.indexOf(r) < 0) {\n            currentRow[r] = item[r]\n          }\n      }))\n      currentRow['index'] = index\n      return currentRow\n    })\n    return tableRowsMap\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ElTableFormat_tsickle_Closure_declarations() {\n/** @type {?} */\nElTableFormat.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElTableFormat.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}