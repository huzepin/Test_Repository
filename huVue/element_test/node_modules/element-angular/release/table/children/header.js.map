{"version":3,"sources":["../../../src/table/children/header.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAM,MAAA,eAAA,CAAA;AAE1B;IAAA;QAEG,UAAK,GAEU,EAAA,CAAA;QAAf,WAAM,GAEY,KAAA,CAAA;QAClB,iBAAY,GAEgB,EAAA,CAAA;IAgE/B,CAAC;IAjED;;;OAGG;IACH,mCADG,GACH,UADG,EAAA;QAEC,IAAM,gBAAgB,CADhB,MAAA,GAAiB,IAAA,CAAK,UAAC,CAAU,EAAC,CAAE,GAAG,CAAA,CAAE,CAAA,CAAE,EAAA,CAAG,CAAA,CAAE,SAAA,CAAA;QAEtD,MAAM,CADC,IAAA,CAAK,MAAC,KAAU,MAAA,CAAO,CAAA,CAAE,MAAI,MAAM,CAAG,CAAA,CAAE,SAAA,CAAA;IAEjD,CAAC;IACH;;;OAGG;IACH,kCAJG,GAIH,UAJG,EAAA;QAKC,EAAE,CAAC,CAAC,EAJC,CAAE,IAAC,KAAQ,CAAA,IAAK,EAAA,CAAG,KAAC,KAAS,CAAA,CAAE,CAAC,CAAA;YAKnC,MAAM,CAJC,EAAA,CAAG,KAAC,GAAO,CAAA,CAAA;QAKpB,CAAC;QACD,MAAM,CAJC,CAAA,CAAA;IAKT,CAAC;IACH;;;OAGG;IACH,kCAPG,GAOH,UAPG,EAAA;QAQC,MAAM,CAPC,EAAA,CAAG,UAAC,GAAY,CAAA,CAAE,CAAA,CAAE,EAAA,CAAG,UAAC,CAAU,CAAA,CAAE,CAAA,CAAA;IAQ7C,CAAC;IALI,wBAAA,GAAoC;QAQ3C,EAPE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;oBAQvB,QAAQ,EAPE,iBAAA;oBAQV,QAAQ,EAPE,y0BA2BT;iBACF,EAPC,EAAG;KAQJ,CAPC;IAQF;;OAEG;IARF,4BAAA,GAAA,cAAA,OAAA,EAUA,EAVA,CAUA,CAdC;IAMK,4BAAA,GAAyD;QAUhE,OAAO,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAU1B,QAAQ,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAU3B,QAAQ,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAU3B,QAAQ,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAU3B,QAAQ,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;QAU3B,cAAc,EATE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,eAAE,EAAe,EAAG,EAAE;KAU3D,CATC;IAUF,oBAAC;CAzED,AAyEC,IAAA;SAvEA,aAAA;AAyED;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC;AACrC,CAAC","file":"header.js","sourceRoot":"","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { WidthItem } from '../table.interface';\nexport class ElTableHeader {\n  \n   model: any[] = []\n   layout: any\n   border: boolean = false\n   height: string | number\n   center: boolean\n   columnsWidth: WidthItem[] = []\n/**\n * @param {?} th\n * @return {?}\n */\nmakeClasses(th: any): string {\n    const /** @type {?} */ isLeaf: string = this.getColspan(th) > 1 ? '' : 'is-leaf'\n    return this.height === 'auto' ? `${isLeaf} ` : ' gutter'\n  }\n/**\n * @param {?} td\n * @return {?}\n */\ngetRowspan(td: any): number {\n    if (td.deep === 0 && td.level !== 0) {\n      return td.level + 1\n    }\n    return 1\n  }\n/**\n * @param {?} th\n * @return {?}\n */\ngetColspan(th: any): number {\n    return th.childCount > 0 ? th.childCount : 1\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-table-header',\n  template: `\n    <ng-template #widthTmp>\n      <col *ngFor=\"let item of columnsWidth\" [width]=\"item.width\">\n    </ng-template>\n    <table class=\"el-table__header\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"\n      [ngStyle]=\"{ width: '100%' }\">\n      <ng-template [ngTemplateOutlet]=\"widthTmp\">\n      </ng-template>\n\n      <tr *ngFor=\"let tr of model\">\n        <th *ngFor=\"let th of tr\" [class]=\"makeClasses(th)\"\n            [ngStyle]=\"{ width: th.width | cssValue }\"\n            [attr.colspan]=\"getColspan(th)\" [attr.rowspan]=\"getRowspan(th)\">\n          <div class=\"cell\" [ngStyle]=\"{\n            width: th.width | cssValue,\n            'display': center ? 'block' : 'inline-block',\n            'text-align': center ? 'center' : 'unset' }\">{{th.label}}</div>\n        </th>\n      </tr>\n    </table>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input },],\n'layout': [{ type: Input },],\n'border': [{ type: Input },],\n'height': [{ type: Input },],\n'center': [{ type: Input },],\n'columnsWidth': [{ type: Input, args: ['columns-width', ] },],\n};\n}\n\nfunction ElTableHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nElTableHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElTableHeader.ctorParameters;\n/** @type {?} */\nElTableHeader.propDecorators;\n/** @type {?} */\nElTableHeader.prototype.model;\n/** @type {?} */\nElTableHeader.prototype.layout;\n/** @type {?} */\nElTableHeader.prototype.border;\n/** @type {?} */\nElTableHeader.prototype.height;\n/** @type {?} */\nElTableHeader.prototype.center;\n/** @type {?} */\nElTableHeader.prototype.columnsWidth;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}