{"version":3,"sources":["../../src/input/help.ts"],"names":[],"mappings":"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","file":"help.js","sourceRoot":"","sourcesContent":["/**\n *  initial file from Element\n *  see: github.com/ElemeFE/element/blob/dev/packages/input/src/calcTextareaHeight.js\n *\n */\n\ntype styling = {\n  contextStyle: string,\n  paddingSize: number,\n  borderSize: number,\n  boxSizing: string,\n}\nlet /** @type {?} */ hiddenTextarea: HTMLTextAreaElement\n\nconst /** @type {?} */ HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`\n\nconst /** @type {?} */ CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst /** @type {?} */ calculateNodeStyling: Function = (targetElement: HTMLTextAreaElement): styling => {\n  const /** @type {?} */ style: CSSStyleDeclaration = window.getComputedStyle(targetElement)\n  const /** @type {?} */ boxSizing: string = style.getPropertyValue('box-sizing')\n  const /** @type {?} */ paddingSize: number = (\n    parseFloat(style.getPropertyValue('padding-bottom')) +\n    parseFloat(style.getPropertyValue('padding-top'))\n  )\n  const /** @type {?} */ borderSize: number = (\n    parseFloat(style.getPropertyValue('border-bottom-width')) +\n    parseFloat(style.getPropertyValue('border-top-width'))\n  )\n  const /** @type {?} */ contextStyle: string = CONTEXT_STYLE\n    .map(name => `${name}:${style.getPropertyValue(name)}`)\n    .join(';')\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nconst /** @type {?} */ getTextareaHeight: Function = (\n  targetElement: HTMLTextAreaElement,\n  minRows: number = null,\n  maxRows: number = null,\n  ): string => {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement<'textarea'>('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n  \n  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement)\n  \n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`)\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let /** @type {?} */ height: number = hiddenTextarea.scrollHeight\n\n  if (boxSizing === 'border-box') {\n    height += borderSize\n  } else if (boxSizing === 'content-box') {\n    height -= paddingSize\n  }\n  \n  hiddenTextarea.value = ''\n  const /** @type {?} */ singleRowHeight: number = hiddenTextarea.scrollHeight - paddingSize\n  \n  if (minRows !== null) {\n    let /** @type {?} */ minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight += paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n  }\n  if (maxRows !== null) {\n    let /** @type {?} */ maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight += paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  \n  return height + 'px'\n}\n\nexport {\n  getTextareaHeight,\n};\n\n\n"]}