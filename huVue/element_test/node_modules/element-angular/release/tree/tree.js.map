{"version":3,"sources":["../../src/tree/tree.ts"],"names":[],"mappings":"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","file":"tree.js","sourceRoot":"","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { ModelStandard } from './utils';\nimport { ElTreeProps, ElTreeModelEvent, ElTreeModelData } from './tree-props';\n\nexport type UserSafeHooks = {\n  findAllChecked: () => string[],\n  removeAllChecked: () => void,\n  updateItemChecked: (id: string | number) => void,\n  updateItemExpanded: (id: string | number) => void,\n}\nexport class ElTree extends ElTreeProps {\n/**\n * @param {?} val\n * @return {?}\n */\nset model(val: ElTreeModelData[]) {\n    const /** @type {?} */ standardTool = new ModelStandard({\n      initDepth: 0,\n      defaultExpandAll: this.defaultExpandAll,\n      defaultExpandedKeys: this.defaultExpandedKeys,\n      defaultCheckedKeys: this.defaultCheckedKeys,\n    })\n    this.identModel = standardTool.filterModel(val)\n  }\nconstructor(\n  ) {\n    super()\n  }\n  \n  userSafeHooks: () => UserSafeHooks = () => ({\n    findAllChecked: this.findAllChecked.bind(this),\n    updateItemChecked: this.updateChecked.bind(this),\n    updateItemExpanded: this.updateExpanded.bind(this),\n    removeAllChecked: this.removeAllChecked.bind(this),\n  })\n/**\n * @return {?}\n */\nfindAllChecked(): string[] {\n    if (!this.showCheckbox) return []\n    return ModelStandard.FindAllChecked(this.identModel)\n  }\n/**\n * @return {?}\n */\nremoveAllChecked(): void {\n    ModelStandard.LoopRemoveChecked(this.identModel)\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nupdateExpanded(id: string | number): void {\n    this.identModel = ModelStandard.DeepUpdateExpanded(id, this.identModel, this.accordion)\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nupdateChecked(id: string | number): void {\n    if (!this.showCheckbox) return\n    this.identModel = ModelStandard.DeepUpdateChecked(id, this.identModel)\n  }\n/**\n * @param {?} next\n * @return {?}\n */\nemitter(next: ElTreeModelEvent): void {\n    this.modelChange.emit(next)\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-tree',\n  template: `\n    <div class=\"el-tree\" role=\"tree\">\n      <el-tree-item *ngFor=\"let item of identModel\"\n        [model]=\"item\" [indent]=\"indent\">\n      </el-tree-item>\n      <div class=\"el-tree__empty-block\" *ngIf=\"!identModel && !identModel.length\">\n        <span class=\"el-tree__empty-text\">{{ emptyText }}</span>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input },],\n};\n}\n\nfunction ElTree_tsickle_Closure_declarations() {\n/** @type {?} */\nElTree.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElTree.ctorParameters;\n/** @type {?} */\nElTree.propDecorators;\n/** @type {?} */\nElTree.prototype.userSafeHooks;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}