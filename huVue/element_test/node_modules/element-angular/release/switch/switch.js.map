{"version":3,"sources":["../../src/switch/switch.ts"],"names":[],"mappings":"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","file":"switch.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, forwardRef, Input, OnInit, Output } from '@angular/core';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ElSwitch implements OnInit, ControlValueAccessor {\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {   // todo, is discarded.\n    console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.')\n  }\n   elDisabled: boolean = false\n   name: string\n   width: number\n   activeIconClass: string\n   inactiveIconClass: string\n   activeText: string\n   inactiveText: string\n   activeColor: string = '#409EFF'\n   inactiveColor: string = '#C0CCDA'\n/**\n * @param {?} val\n * @return {?}\n */\nset model(val: boolean) {\n    this._model = val\n    this.updateStyles()\n  }\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  _model: boolean = false\n  hasText: boolean = false\n  realWidth: number\n  coreStyles: SafeStyle\n  iconTransform: SafeStyle\n/**\n * @param {?} sanitizer\n */\nconstructor(\nprivate sanitizer: DomSanitizer,\n  ) {\n  }\n/**\n * @param {?} nextValue\n * @return {?}\n */\nchangeHandle(nextValue: boolean): void {\n    this.model = nextValue\n    this.modelChange.emit(nextValue)\n    this.controlChange(nextValue)\n  }\n/**\n * @return {?}\n */\nupdateStyles(): void {\n    let /** @type {?} */ baseStyle = `width: ${this.realWidth}px;`\n    const /** @type {?} */ translate = this._model ? `translate3d(${this.realWidth - 20}px, 0, 0)` : ''\n    const /** @type {?} */ color = this._model ? this.activeColor : this.inactiveColor;\n    const /** @type {?} */ colorStyles = `border-color: ${color}; background-color: ${color};`\n    \n    this.iconTransform = this.sanitizer.bypassSecurityTrustStyle(`transform: ${translate}`)\n    if (this.activeColor && this.inactiveColor) {\n      baseStyle += colorStyles\n    }\n    this.coreStyles = this.sanitizer.bypassSecurityTrustStyle(baseStyle)\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.realWidth = this.width ? this.width : 40\n    this.updateStyles()\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-switch',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElSwitch),\n    multi: true\n  }],\n  template: `\n    <label class=\"el-switch\"\n      [class.is-disabled]=\"elDisabled\"\n      [class.el-switch--wide]=\"hasText\"\n      [class.is-checked]=\"_model\">\n      <div class=\"el-switch__mask\" *ngIf=\"elDisabled\"></div>\n      <input class=\"el-switch__input\" type=\"checkbox\"\n        [name]=\"name\" [disabled]=\"elDisabled\"\n        [ngModel]=\"_model\" (ngModelChange)=\"changeHandle($event)\">\n      \n      <div class=\"el-switch__label el-switch__label--left\" [class.is-active]=\"!_model\"\n        *ngIf=\"inactiveText || inactiveIconClass\">\n        <i [class]=\"inactiveIconClass\" *ngIf=\"inactiveIconClass\"></i>\n        <span *ngIf=\"!inactiveIconClass\">{{ inactiveText }}</span>\n      </div>\n\n      <span class=\"el-switch__core\" [style]=\"coreStyles\">\n        <span class=\"el-switch__button\" [style]=\"iconTransform\"></span>\n      </span>\n\n      <div class=\"el-switch__label el-switch__label--right\" [class.is-active]=\"_model\"\n           *ngIf=\"activeText || activeIconClass\">\n        <i [class]=\"activeIconClass\" *ngIf=\"activeIconClass\"></i>\n        <span *ngIf=\"!activeIconClass\">{{ activeText }}</span>\n      </div>\n    </label>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'elDisabled': [{ type: Input },],\n'name': [{ type: Input },],\n'width': [{ type: Input },],\n'activeIconClass': [{ type: Input, args: ['active-icon-class', ] },],\n'inactiveIconClass': [{ type: Input, args: ['inactive-icon-class', ] },],\n'activeText': [{ type: Input, args: ['active-text', ] },],\n'inactiveText': [{ type: Input, args: ['inactive-text', ] },],\n'activeColor': [{ type: Input, args: ['active-color', ] },],\n'inactiveColor': [{ type: Input, args: ['inactive-color', ] },],\n'model': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nElSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElSwitch.ctorParameters;\n/** @type {?} */\nElSwitch.propDecorators;\n/** @type {?} */\nElSwitch.prototype.elDisabled;\n/** @type {?} */\nElSwitch.prototype.name;\n/** @type {?} */\nElSwitch.prototype.width;\n/** @type {?} */\nElSwitch.prototype.activeIconClass;\n/** @type {?} */\nElSwitch.prototype.inactiveIconClass;\n/** @type {?} */\nElSwitch.prototype.activeText;\n/** @type {?} */\nElSwitch.prototype.inactiveText;\n/** @type {?} */\nElSwitch.prototype.activeColor;\n/** @type {?} */\nElSwitch.prototype.inactiveColor;\n/** @type {?} */\nElSwitch.prototype.modelChange;\n/** @type {?} */\nElSwitch.prototype._model;\n/** @type {?} */\nElSwitch.prototype.hasText;\n/** @type {?} */\nElSwitch.prototype.realWidth;\n/** @type {?} */\nElSwitch.prototype.coreStyles;\n/** @type {?} */\nElSwitch.prototype.iconTransform;\n/** @type {?} */\nElSwitch.prototype.controlChange;\n/** @type {?} */\nElSwitch.prototype.controlTouch;\n/** @type {?} */\nElSwitch.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}