{"version":3,"sources":["../../src/progress/progress.ts"],"names":[],"mappings":"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","file":"progress.js","sourceRoot":"","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nexport class Elprogress implements OnInit {\n  \n   percentage: number = 0\n   type: string = 'line'\n   status: string\n   strokeWidth: number = 6\n   textInside: boolean = false\n   showText: boolean = true\n  // only in type=circle\n   width: number = 126\n   activeColor: string\n  \n  relativeStrokeWidth: string\n/**\n * @param {?} sanitizer\n */\nconstructor(\nprivate sanitizer: DomSanitizer,\n  ) {\n  }\n/**\n * @return {?}\n */\nprogressTextSize(): number {\n    return this.type === 'line' ? 12 + this.strokeWidth * 0.4\n      : this.width * 0.111111 + 2\n  }\n/**\n * @return {?}\n */\nmakeIconClass(): string {\n    if (this.type === 'line') {\n      return this.status === 'success' ? 'el-icon-circle-check' : 'el-icon-circle-cross'\n    }\n    return this.status === 'success' ? 'el-icon-check' : 'el-icon-close'\n  }\n/**\n * @return {?}\n */\nmakeStroke(): string {\n    if (this.status === 'success') return '#13ce66'\n    if (this.status === 'exception') return '#ff4949'\n    return '#20a0ff'\n  }\n/**\n * @return {?}\n */\nmakeTrackPath(): string {\n    const /** @type {?} */ radius: number = ~~(50 - Number.parseFloat(this.relativeStrokeWidth) / 2)\n    return `M 50 50 m 0 -${radius} a ${radius} ${radius} 0 1 1 0 ${radius * 2} a ${radius} ${radius} 0 1 1 0 -${radius * 2}`\n  }\n/**\n * @return {?}\n */\nsvgStyles(): SafeStyle {\n    const /** @type {?} */ perimeter = (50 - parseFloat(this.relativeStrokeWidth) / 2) * 2 * Math.PI\n    let /** @type {?} */ styles = `stroke-dasharray: ${perimeter}px, ${ perimeter}px;`\n    styles += `stroke-dashoffset: ${(1 - this.percentage / 100) *  perimeter}px;`\n    styles += 'transition: stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'\n    return this.sanitizer.bypassSecurityTrustStyle(styles)\n  }\n/**\n * @return {?}\n */\ncolorStryles(): SafeStyle {\n    const /** @type {?} */ styles = `width: ${this.percentage}%;` +\n      (this.activeColor ? `background-color: ${this.activeColor};` : '')\n    return this.sanitizer.bypassSecurityTrustStyle(styles)\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this.percentage > 100 && (this.percentage = 100)\n    this.relativeStrokeWidth = (this.strokeWidth / this.width * 100).toFixed(1)\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-progress',\n  template: `\n    <div [class]=\"'el-progress el-progress--' + type + (status ? ' is-' + status : '')\"\n      [class.el-progress--without-text]=\"!showText\"\n      [class.el-progress--text-inside]=\"textInside\">\n      <div class=\"el-progress-bar\" *ngIf=\"type === 'line'\">\n        <div class=\"el-progress-bar__outer\" [ngStyle]=\"{height: strokeWidth + 'px'}\">\n          <div class=\"el-progress-bar__inner\" [style]=\"colorStryles()\">\n            <div class=\"el-progress-bar__innerText\" *ngIf=\"showText && textInside\">{{percentage}}%</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"el-progress-circle\" *ngIf=\"type === 'circle'\" [ngStyle]=\"{height: width + 'px', width: width + 'px'}\">\n        <svg viewBox=\"0 0 100 100\">\n          <path class=\"el-progress-circle__track\" [attr.d]=\"makeTrackPath()\" stroke=\"#e5e9f2\"\n            [attr.stroke-width]=\"relativeStrokeWidth\" fill=\"none\"></path>\n          <path class=\"el-progress-circle__path\" [attr.d]=\"makeTrackPath()\" stroke-linecap=\"round\" [attr.stroke]=\"makeStroke()\"\n            [attr.stroke-width]=\"relativeStrokeWidth\" fill=\"none\" [style]=\"svgStyles()\"></path>\n        </svg>\n      </div>\n      <div class=\"el-progress__text\" *ngIf=\"showText && !textInside\"\n           [ngStyle]=\"{fontSize: progressTextSize + 'px'}\">\n        <ng-container *ngIf=\"!status\">{{percentage}}%</ng-container>\n        <i *ngIf=\"status\" [class]=\"makeIconClass()\"></i>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'percentage': [{ type: Input },],\n'type': [{ type: Input },],\n'status': [{ type: Input },],\n'strokeWidth': [{ type: Input, args: ['stroke-width', ] },],\n'textInside': [{ type: Input, args: ['text-inside', ] },],\n'showText': [{ type: Input, args: ['show-text', ] },],\n'width': [{ type: Input },],\n'activeColor': [{ type: Input, args: ['active-color', ] },],\n};\n}\n\nfunction Elprogress_tsickle_Closure_declarations() {\n/** @type {?} */\nElprogress.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElprogress.ctorParameters;\n/** @type {?} */\nElprogress.propDecorators;\n/** @type {?} */\nElprogress.prototype.percentage;\n/** @type {?} */\nElprogress.prototype.type;\n/** @type {?} */\nElprogress.prototype.status;\n/** @type {?} */\nElprogress.prototype.strokeWidth;\n/** @type {?} */\nElprogress.prototype.textInside;\n/** @type {?} */\nElprogress.prototype.showText;\n/** @type {?} */\nElprogress.prototype.width;\n/** @type {?} */\nElprogress.prototype.activeColor;\n/** @type {?} */\nElprogress.prototype.relativeStrokeWidth;\n/** @type {?} */\nElprogress.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}